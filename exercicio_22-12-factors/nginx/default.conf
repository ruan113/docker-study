server {
  # Define que o servidor web irá escutar por conexões na porta 80, que é a porta padrão para tráfego HTTP.
  listen        80;
  # Define o nome do servidor. Neste caso, está configurado para responder a solicitações feitas para "localhost".
  server_name   localhost;

  # Define as configurações para lidar com solicitações feitas para a raiz do servidor. Neste caso, define que os arquivos HTML devem ser servidos a partir do diretório "/usr/share/nginx/html" e que os arquivos "index.html" e "index.htm" devem ser usados como página inicial. 
  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
  }
  
  # Configura páginas de erro para os códigos de status 500, 502, 503 e 504, redirecionando para o arquivo "/50x.html" no diretório "/usr/share/nginx/html".
  error_page 500 502 503 504 /50x.html;
  
  # Define as configurações para servir o arquivo de erro "/50x.html" diretamente.location = /50x.
  location = /50x.html {
    root /usr/share/nginx/html;
  }
  
  # Define as configurações para lidar com solicitações feitas para a rota "/api". Neste caso, todas as solicitações para "/api" são encaminhadas para o endereço "http://app:8080/" usando o protocolo HTTP versão 1.1.
  location /api { 
    # Comentario legal visto na aula: O compose por ser um agrupado de containers, permite uma comunicação com esses containers atravez de outro container, o que pode ser visto na linha de código abaixo
    # O que esta sendo feito aqui é basicamente o nginx redirecionado a requisição http://localhost/api para o localhost do service "app" que esta exposto na porta 8080 (como visto no docker-compose.yml)
    # Então sempre que quisermos acessar um serviço dentro da nossa composição de serviços, podemos utilizar o nome do serviço na requisição em vez de termos que saber o endereço de ip desse serviço, somente o nome ja basta
    proxy_pass http://app:8080/; 
    proxy_http_version 1.1;
  }
}
